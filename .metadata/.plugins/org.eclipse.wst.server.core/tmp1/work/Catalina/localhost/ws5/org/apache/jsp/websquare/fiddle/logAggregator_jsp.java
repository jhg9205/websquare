/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.10
 * Generated at: 2021-12-23 01:03:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.websquare.fiddle;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import websquare.logging.util.*;
import websquare.util.*;
import java.util.*;
import org.json.simple.*;

public final class logAggregator_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("org.json.simple");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("websquare.util");
    _jspx_imports_packages.add("websquare.logging.util");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/plain; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


ServletInputStream in = null;
java.io.BufferedInputStream bin = null;
try {
	bin = new java.io.BufferedInputStream( request.getInputStream() );
	String args = StreamUtil.getString( bin , "UTF-8" );
	if( args != null && !args.equals("") ) {
		JSONObject clientData = (JSONObject) JSONValue.parse(args);
		
		String clientID = (String)session.getAttribute("WebsquareRemoteConsole");
		String clientName = (String)clientData.get("clientName");
		String remoteAddr = request.getRemoteAddr();
		String userAgent = request.getHeader("User-Agent");
		
		if(clientID == null) {
			clientID = remoteAddr + "_" + System.currentTimeMillis();;
			session.setAttribute("WebsquareRemoteConsole", clientID);
		}

		if(clientName != null && clientName.trim().length() > 0 && remoteAddr != null && remoteAddr.trim().length() > 0 && userAgent != null && userAgent.trim().length() > 0 ) {
			Hashtable hash = (Hashtable)application.getAttribute("WebsquareRemoteConsole");
			if(hash == null) {
				hash = new Hashtable();
				application.setAttribute("WebsquareRemoteConsole", hash);
			}
			Hashtable logInfo = (Hashtable)hash.get(clientID);
			if(logInfo == null) {
				logInfo = new Hashtable();
				hash.put(clientID, logInfo);
			}
	
			logInfo.put("clientID", clientID);
			logInfo.put("clientName", clientName);
			logInfo.put("remoteAddr", remoteAddr);
			logInfo.put("userAgent", userAgent);
			Vector logs = (Vector)logInfo.get("logs");
			if( logs == null ) {
				logs = new Vector();
				logInfo.put("logs", logs);
			}
			
			JSONArray logsJSON = (JSONArray) clientData.get("logs");
			if( logs.size() + logsJSON.size() > 500 ) {
				int deleteCnt = logs.size() + logsJSON.size() - 500;
				while(deleteCnt > 0) {
					logs.removeElementAt(0);
					deleteCnt--;
				}
			}
			for (int i = 0; i < logsJSON.size(); i++) {
				String[] logItem = new String[2];
				logItem[0] = System.currentTimeMillis() + "";
				logItem[1] = (String)logsJSON.get(i);
				logs.addElement(logItem);
			}
			
			String namespace =  "websquare.client." + request.getRemoteAddr().replace('.', '_').replace(':', '_');
			LogUtil.info( namespace, "Client ID:" + clientID + "\nClient Name:" + clientName + "\nUser-Agent : " + request.getHeader("User-Agent") + "\n=======  CLIENT LOG(" + request.getRemoteAddr() + ") =======\n" + args + "\n===========================\n" );
		}
		
	}
} catch (Throwable e) {
	LogUtil.exception("[saveLog.jsp] Exception.", e);
}
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
