/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.10
 * Generated at: 2022-03-04 01:39:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.websquare;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.math.*;
import java.net.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.zip.*;
import javax.servlet.http.*;
import org.w3c.dom.*;
import websquare.i18n.*;
import websquare.logging.*;
import websquare.util.*;
import websquare.logging.util.LogUtil;

public final class I18N_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("websquare.logging");
    _jspx_imports_packages.add("java.security");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("org.w3c.dom");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("java.util.zip");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("websquare.util");
    _jspx_imports_packages.add("java.math");
    _jspx_imports_packages.add("websquare.i18n");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("websquare.logging.util.LogUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


HTTPContext frameworkContext = null;
try {
	
	frameworkContext = HTTPContext.getContext();
	frameworkContext.setWebInfo(request, response, null, null );
	
	String w2xPath = HttpUtil.getParameter( request, "w2xPath" );
	int iPosition = w2xPath.indexOf("?");
	if ( iPosition > -1){
		w2xPath = w2xPath.substring(0, w2xPath.indexOf("?"));
	}
	
	if( FileValidUtil.getInstance().isValidFullPath( w2xPath ) ) {  //경로 유효성 검사
		String result= Web2FileCache.getInstance().getXML(request);
		if ( null != w2xPath && !"".equals(w2xPath) && null != result && !"".equals(result) ) {
			OutputStream os = null;
			try {
				byte[] bytes = result.getBytes("UTF-8");
				MessageDigest md = null;
				try {
					md = MessageDigest.getInstance("SHA");
					byte[] messageDigest = md.digest(bytes);
					StringBuilder sb = new StringBuilder();
					sb.append("\"");

					for(int i=0; i< messageDigest.length ;i++){
					     sb.append(Integer.toString((messageDigest[i] & 0xff) + 0x100, 16).substring(1));
					}

					sb.append("\"");
					String ETAG = sb.toString();
					String previousETAG = request.getHeader("If-None-Match");

					if (previousETAG != null && ETAG != null) {
						if (ETAG.equals(previousETAG)) {
							response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
							return;
						}
					}
					response.setHeader("ETag", sb.toString() );
				} catch (Exception e) {
					LogUtil.exception("[I18N.jsp] MessageDigest Exception.", e);
				}

				boolean compressed = true;
				String ae = request.getHeader("Accept-Encoding");
				if (ae != null && ae.indexOf("gzip") != -1) { // 압축 가능 여부 판단
					compressed = true;
				}

				if (compressed) {
					ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
					OutputStream zipOut = new GZIPOutputStream(byteOut);
					zipOut.write(bytes, 0, bytes.length);
					zipOut.flush();
					zipOut.close();
					byteOut.flush();
					bytes = byteOut.toByteArray();
					response.setHeader("Content-Encoding", "gzip");
				}
		
				SimpleDateFormat formatter = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);
				Calendar cal = Calendar.getInstance();
				cal.add(Calendar.YEAR, 1);
				cal.add(Calendar.DATE, -1);
				formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
				String expires = formatter.format(cal.getTime());
				response.setHeader("Expires", expires);
				response.setHeader("Last-Modified", expires);
				response.setHeader("Cache-Control", "public, max-age=31449600");	// 31449600

				response.setContentLength(bytes.length);
				os = response.getOutputStream();
				os.write(bytes,0,bytes.length);
			} catch (Exception e) {
				throw e;
			} finally {
				try {
					os.flush();
				} catch( Exception e ) {
					LogUtil.exception("[I18N.jsp] OutputStream flush Exception.", e);
				}
				try {
					os.close();
				} catch( Exception e ) {
					LogUtil.exception("[I18N.jsp] OutputStream close Exception.", e);
				}
			}
		} else {
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);
			return;
		}
	}
} catch (FileNotFoundException e1) {
	LogUtil.exception("[I18N.jsp] FileNotFoundException Exception.", e1);
} catch (Exception e) {
	LogUtil.exception("[I18N.jsp] Exception.", e);
} finally {
	frameworkContext.setWebInfo(null,null,null,null);
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
